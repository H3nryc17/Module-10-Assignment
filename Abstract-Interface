//Example using Abstract
abstract class Animal {
    public abstract void sound();

    public void sleep() {
        System.out.println("This animal is sleeping.");
    }
}

class Dog extends Animal {
    public void sound() {
        System.out.println("The dog barks.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound();
        dog.sleep();
    }
}

//Example using Interface
interface Flyable {
    void fly();  
}

class Bird implements Flyable {
    public void fly() {
        System.out.println("The bird flies high in the sky.");
    }
}

public class Main {
    public static void main(String[] args) {
        Bird bird = new Bird();
        bird.fly();
    }
}

//When would we choose one over the other?
//You would choose an abstract class when you need inheritance and a shared functionality, while if you chose interface its for more flexibility and capability-based designs.

